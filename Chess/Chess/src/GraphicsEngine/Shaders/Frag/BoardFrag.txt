#version 410 core
out vec4 FragColor;

in vec2 fragPos; //position for color data from vert shader

uniform vec2 movePositions[27]; //a queen can have a maximum of 29 moves
uniform int numMoves;

void main()
{
	//calculate row and column indices
	int row = int(floor(fragPos.y));
	int col = int(floor(fragPos.x));

	//check if this is an available move square
	bool movePos = false;
	float tolerance = 0.01f;
	for(int i = 0; i < numMoves; i++){
		if(abs(col - movePositions[i].x) < tolerance && abs(row - movePositions[i].y) < tolerance){
			movePos = true;
			break;
		}
		//set it back to false if nothing is found
		movePos = false;
	}

	//alternate colors for checker board pattern
	if((row + col) % 2 == 0){
		if(movePos){
			FragColor = vec4(180.f / 255.f, 150.f / 255.f, 40.f / 255.f, 1.f); //dark green
		}
		else{
			FragColor = vec4(150.f / 255.f, 172.f / 255.f, 48.f / 255.f, 1.f); //green
		}
	} 
	else {
		if(movePos){
			FragColor = vec4(245.f / 255.f, 200.f / 255.f, 180.f / 255.f, 1.f); //Grey
		}
		else{
			FragColor = vec4(238.f / 255.f, 238.f / 255.f, 210.f / 255.f, 1.f); //white
		}
	}
}
